name: Test

on:
  # push:
  #   branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Allow manual triggering
  workflow_call: # Allow referencing

concurrency:
  group: test-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Linux testing with Redis support
  test-linux:
    name: Test Python ${{ matrix.python-version }} on Linux
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      memcached:
        image: memcached:1.6-alpine
        ports:
          - 11211:11211

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --extra test --extra redis --extra memcached

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Install Memcached CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd

      - name: Wait for Redis
        run: |
          echo "Waiting for Redis to be ready..."
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping 2>/dev/null; do sleep 1; done'
          echo "Redis is ready!"

      - name: Wait for Memcached
        run: |
          echo "Waiting for Memcached to be ready..."
          timeout 30 bash -c 'until echo stats | nc -z localhost 11211 2>/dev/null; do sleep 1; done'
          echo "Memcached is ready!"

      - name: Run full test suite with coverage
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          MEMCACHED_HOST: localhost
          MEMCACHED_PORT: 11211
        run: |
          uv run pytest \
            --cov=src/traffik \
            --cov-branch \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=70 \
            --tb=short \
            -v

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Windows and macOS testing without external backend deps (containers not supported)
  test-cross-platform:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.9", "3.11", "3.12"]  # Test fewer versions for speed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --extra test

      - name: Run tests without external backend dependencies
        env:
          SKIP_REDIS_TESTS: true
          SKIP_MEMCACHED_TESTS: true
        run: |
          uv run pytest tests/ -v --tb=short

  # Test installation from built package
  test-install:
    name: Test Package Installation
    runs-on: ubuntu-latest
    needs: [test-linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build package
        run: uv build

      - name: Install built package
        run: |
          cd dist
          uv pip install --system traffik-*.whl

      - name: Test installation
        run: |
          python -c "
          import traffik
          from traffik.backends.inmemory import InMemoryBackend
          from traffik.throttles import HTTPThrottle
          print('âœ… Package installed and imports work')
          "

  # Test with minimal dependencies
  test-minimal:
    name: Test Minimal Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install minimal dependencies
        run: |
          uv sync --extra test

      - name: Run tests
        env:
          SKIP_REDIS_TESTS: true
          SKIP_MEMCACHED_TESTS: true
        run: |
          uv run pytest tests/ -m "not (slow or concurrent)" --strict-markers -v --tb=short
